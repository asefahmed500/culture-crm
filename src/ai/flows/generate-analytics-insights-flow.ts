
'use server';

/**
 * @fileOverview Analyzes all customer profiles to generate high-level predictive analytics and trends.
 *
 * - generateAnalyticsInsights - The main flow function.
 * - GenerateAnalyticsInsightsOutput - The structured output for the analytics dashboard.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import dbConnect from '@/lib/mongoose';
import CustomerProfile from '@/models/customer-profile';
import Story from '@/models/story';

const PredictionSchema = z.object({
  segmentDescription: z.string().describe("A description of the customer segment this prediction applies to."),
  prediction: z.string().describe("The specific prediction for this segment (e.g., 'Likely to purchase premium products in the next quarter'). This should be framed as a point in the cultural journey."),
  confidenceScore: z.number().describe("Confidence score (0-100) for this prediction."),
  recommendation: z.string().describe("An actionable recommendation for this specific intervention point in the customer's cultural journey. This should be a clear, direct instruction that could trigger a marketing automation workflow (e.g., 'Add this segment to the 'High-Value Upsell' email sequence.')."),
});

const TrendSchema = z.object({
  trend: z.string().describe("A description of the identified trend (e.g., 'Rising interest in sustainable travel')."),
  supportingData: z.string().describe("A brief summary of the data points supporting this trend."),
  implication: z.string().describe("The business implication of this trend."),
});

const SeasonalForecastSchema = z.object({
    season: z.string().describe("The season or event for the forecast (e.g., 'Summer', 'Back-to-School', 'Holiday Season')."),
    segmentDescription: z.string().describe("The customer segment the forecast applies to."),
    predictedBehavior: z.string().describe("The predicted behavior for this segment during the season."),
    recommendation: z.string().describe("A marketing recommendation based on this seasonal forecast."),
});

const InterestTrendSchema = z.object({
    interest: z.string().describe("The cultural interest or preference (e.g., 'Indie Music', 'Vintage Fashion')."),
    changeDescription: z.string().describe("A brief explanation of why this trend is emerging or declining."),
});

const CulturalShiftStorySchema = z.object({
    title: z.string().describe("A catchy, narrative headline for the most significant cultural shift detected (e.g., 'The Rise of the Mindful Hedonist')."),
    narrative: z.string().describe("A 2-3 paragraph story explaining this cultural shift. It should synthesize multiple data points into a cohesive narrative about what's changing in the customer base and why. This is an automated hypothesis generated by the AI."),
    keyDataPoints: z.array(z.string()).describe("A list of 3-4 specific data points or trends that support this story."),
    recommendation: z.string().describe("A single, powerful strategic recommendation on how the business can capitalize on this cultural shift."),
});

const CulturalEvolutionSchema = z.object({
    lifeStageShifts: z.array(z.string()).describe("A list of detected or inferred life stage transitions within the customer base (e.g., 'A significant portion of the 'Urban Explorer' segment appears to be entering parenthood, based on new purchasing patterns.')."),
    culturalDrift: z.array(z.string()).describe("Analysis of how customers are moving between different cultural segments over time. (e.g., 'Customers from the 'Casual Gamers' segment are showing increased interest in 'DIY Hobbies', suggesting a drift towards the 'Creative Homebodies' segment.')."),
    externalInfluenceMapping: z.array(z.string()).describe("Inferred mapping of how external events or macro-trends are influencing customer preferences (e.g., 'The recent global focus on wellness is likely driving the increased interest in 'Mindfulness Apps' across multiple segments.')."),
    microTrends: z.array(z.string()).describe("Identification of nascent, micro-trends before they become mainstream. (e.g., 'A small but growing cluster of high-value customers is showing interest in 'Analog Photography', a potential micro-trend to watch.').")
});

const GlobalIntelligenceSchema = z.object({
    regionalCulturalMapping: z.array(z.object({
        region: z.string().describe("A major global region (e.g., 'North America', 'Western Europe', 'Southeast Asia')."),
        dominantCulturalTraits: z.array(z.string()).describe("A list of cultural traits from the customer data that are likely to be most prevalent in this region."),
        marketImplication: z.string().describe("The key market implication for this region based on its cultural profile."),
    })).describe("A mapping of cultural trends to major global regions, based on world knowledge and the provided customer data."),
    culturalCollisionHotspots: z.array(z.object({
        hotspot: z.string().describe("A potential area of cultural friction (e.g., 'Humor styles', 'Color symbolism', 'Pacing of advertisements')."),
        description: z.string().describe("An explanation of why this could be a point of collision when marketing globally."),
        recommendation: z.string().describe("A recommendation to mitigate this risk."),
    })).describe("Identification of potential cultural collisions when taking a global brand into local markets."),
    crossCulturalCampaignAdvice: z.string().describe("General, actionable advice on how to optimize marketing campaigns to be effective across different cultural contexts identified in the data."),
    culturalSensitivityScore: z.number().min(0).max(100).describe("An overall score (0-100) representing the brand's current cultural sensitivity based on the diversity of tastes in its customer base. A high score means the brand appeals to a wide variety of cultural preferences and is less likely to cause offense."),
});

const AnomalyAnalysisSchema = z.object({
    isAnomaly: z.boolean().describe("Whether a significant, actionable anomaly was detected."),
    description: z.string().describe("A concise description of the anomaly if one is detected. This is the content for the 'dataShiftAlert'. If no anomaly, this will be an empty string."),
    potentialCause: z.string().optional().describe("A hypothesis about the potential cause of the anomaly."),
    suggestedAction: z.string().optional().describe("A high-level strategic action to capitalize on or mitigate the anomaly."),
});

const GenerateAnalyticsInsightsOutputSchema = z.object({
  overallSummary: z.string().describe("A high-level summary of the most important findings from the analysis."),
  keyPatterns: z.array(z.string()).describe("List of 3-5 key behavioral or cultural patterns identified across the entire customer base. This is part of the AI's self-learning pattern discovery."),
  predictions: z.object({
    purchaseLikelihood: PredictionSchema.describe("A prediction about a segment's likelihood to make a future purchase."),
    churnRisk: PredictionSchema.describe("A cultural churn prediction. This identifies when a segment's cultural evolution may lead them to outgrow the brand."),
    brandAdvocacy: PredictionSchema.describe("A prediction about a segment's potential to become brand advocates."),
    upsellOpportunity: PredictionSchema.describe("Identifies products or services that align with a segment's evolving cultural identity."),
  }),
  topEmergingInterests: z.array(InterestTrendSchema).length(5).describe("A ranked list of the top 5 emerging cultural interests gaining popularity."),
  topDecliningInterests: z.array(InterestTrendSchema).length(5).describe("A ranked list of the top 5 declining cultural interests losing engagement."),
  seasonalForecasts: z.array(SeasonalForecastSchema).describe("2-3 seasonal behavior forecasts for key customer segments."),
  marketOpportunityGaps: z.array(z.object({
      gapDescription: z.string().describe("An description of the unmet or underserved cultural preference."),
      productIdea: z.string().describe("A high-level concept for a new product or feature to fill this gap."),
      targetFeatures: z.array(z.string()).describe("A list of key features this new product should have to appeal to the target culture."),
  })).describe("A cultural gap analysis presented as a list of actionable product ideas."),
  competitiveIntelligence: z.string().describe("A brief analysis of the competitive landscape from a cultural perspective. Using world knowledge, infer potential competitors and analyze their cultural positioning. Identify cultural threats (e.g., competitors targeting your key segments) and opportunities (e.g., underserved cultural segments)."),
  dataShiftAlert: AnomalyAnalysisSchema.describe("An analysis from the cultural anomaly detection agent. This agent determines if a significant shift has occurred and provides analysis and recommended actions."),
  culturalShiftStory: CulturalShiftStorySchema.describe("A narrative story about the single most important cultural shift detected in the data. This is the AI's automated hypothesis generation at work."),
  culturalEvolution: CulturalEvolutionSchema.describe("Insights into how customer culture is changing over time."),
  globalIntelligence: GlobalIntelligenceSchema.describe("Insights into how cultural trends may differ across geographic markets, providing guidance for global marketing efforts."),
});

export type GenerateAnalyticsInsightsOutput = z.infer<typeof GenerateAnalyticsInsightsOutputSchema>;

export async function generateAnalyticsInsights(): Promise<GenerateAnalyticsInsightsOutput> {
  return generateAnalyticsInsightsFlow();
}

const analyticsPrompt = ai.definePrompt({
  name: 'analyticsInsightsPrompt',
  inputSchema: z.any(), // The input is a direct array of profiles
  outputSchema: GenerateAnalyticsInsightsOutputSchema,
  prompt: `You are a team of AI agents working together: a cultural sociologist, a market intelligence analyst, a geo-context engine, a product development advisor, and an anomaly detection specialist. Your task is to analyze a database of anonymized customer cultural profiles to generate a comprehensive trend report and predictive analysis. Assume the data is chronological, with the latest data appearing at the end of the array.

Analyze the following customer profiles, which now contain rich, real-world taste data derived from the Qloo Taste AI API:
{{{json input}}}

Based on this entire dataset, each agent will perform its analysis:

1.  **Cultural Sociology Agent**:
    *   **Overall Summary**: Provide a high-level summary of the most critical insights a marketing director would need to know.
    *   **Pattern Discovery**: Find 3-5 of the most significant recurring cultural patterns that a human might miss.
    *   **Cultural Trend Monitoring**: Identify the top 5 emerging and declining cultural interests.
    *   **Dynamic Cultural Evolution Tracking**: Analyze life stage transitions, cultural drift between segments, external influences, and nascent micro-trends.
    *   **Automated Hypothesis Generation**: Identify the single most significant cultural shift and write a compelling narrative 'Cultural Shift Story' about it.

2.  **Market Intelligence Agent**:
    *   **Predictive Journey Mapping**: Model the cultural evolution for Purchase, Churn, Advocacy, and Upsell predictions. Each 'recommendation' must be a specific, direct instruction for a marketing automation system (e.g., "Trigger the 'At-Risk Customer' workflow").
    *   **Competitive Intelligence**: Analyze the competitive landscape from a cultural perspective. Provide strategic analysis (e.g., 'The rise in eco-conscious values is a threat, as competitor X is well-positioned. To counter, focus on the 'artisan-made' aspect of sustainability, which they ignore.').
    *   **Seasonal Forecasts**: Predict behavior for 2-3 key segments during upcoming seasons.

3.  **Product Advisor Agent**:
    *   **Cultural Gap Analysis**: For 'marketOpportunityGaps', don't just list gaps. Frame each as an actionable product idea, including a concept and a list of target features that would appeal to the underserved cultural need.

4.  **Anomaly Detection Agent**:
    *   **Event-Driven Automation**: For the 'dataShiftAlert' field, determine if a significant, rapid shift in data patterns exists. If so, set 'isAnomaly' to true, describe the anomaly, hypothesize its cause, and suggest a strategic action. If not, set 'isAnomaly' to false.

5.  **Geo-Context Engine**:
    *   **Global Intelligence**: Even without explicit location data, infer how cultural trends might map to global regions. Identify potential "cultural collision hotspots," provide cross-cultural campaign advice, and calculate a "Cultural Sensitivity Score" based on the diversity of tastes.

Synthesize all agent findings into the single, specified JSON output format to power a comprehensive analytics dashboard.
`,
});

export const generateAnalyticsInsightsFlow = ai.defineFlow(
  {
    name: 'generateAnalyticsInsightsFlow',
    outputSchema: GenerateAnalyticsInsightsOutputSchema,
  },
  async () => {
    await dbConnect();
    const profiles = await CustomerProfile.find({}).lean();
    
    if (!profiles || profiles.length === 0) {
      throw new Error("No customer profiles found in the database. Please import data on the Customer Import page before generating analytics.");
    }

    // To prevent exceeding context window limits, we'll summarize a sample of profiles.
    const MAX_PROFILES_FOR_ANALYSIS = 100;
    let profilesForPrompt;
    if (profiles.length > MAX_PROFILES_FOR_ANALYSIS) {
        // Create a summary of profiles if there are too many
        profilesForPrompt = profiles.slice(0, MAX_PROFILES_FOR_ANALYSIS).map(p => ({
            ageRange: p.ageRange,
            spendingLevel: p.spendingLevel,
            interactionFrequency: p.interactionFrequency,
            // Summarize DNA to just the scores to save space
            culturalDNA: p.culturalDNA ? {
                music: p.culturalDNA.music.score,
                entertainment: p.culturalDNA.entertainment.score,
                dining: p.culturalDNA.dining.score,
                fashion: p.culturalDNA.fashion.score,
                travel: p.culturalDNA.travel.score,
                socialCauses: p.culturalDNA.socialCauses.score,
            } : {}
        }));
    } else {
        // Use full profiles if count is manageable
        profilesForPrompt = profiles.map(p => ({
            ageRange: p.ageRange,
            spendingLevel: p.spendingLevel,
            interactionFrequency: p.interactionFrequency,
            culturalDNA: p.culturalDNA,
        }));
    }

    const { output } = await analyticsPrompt(profilesForPrompt);

    if (!output) {
      throw new Error('The AI model did not return a valid analytics report.');
    }

    // Save the story to the database for historical tracking
    await Story.create(output.culturalShiftStory);
    
    return output;
  }
);
